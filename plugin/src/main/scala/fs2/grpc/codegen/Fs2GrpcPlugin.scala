/*
 * Copyright (c) 2018 Gary Coady / Fs2 Grpc Developers
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

package fs2.grpc.codegen

import sbt._
import sbt.Keys._
import sbt.plugins.JvmPlugin
import protocbridge.{Artifact, Generator, SandboxedJvmGenerator, Target}
import sbtprotoc.ProtocPlugin.autoImport.PB
import fs2.grpc.buildinfo.BuildInfo

sealed trait CodeGeneratorOption extends Product with Serializable

object Fs2Grpc extends AutoPlugin {

  override def requires: Plugins = Fs2GrpcPlugin
  override def trigger: PluginTrigger = NoTrigger

  override def projectSettings: Seq[Def.Setting[_]] =
    List(
      Compile / PB.targets := Fs2GrpcPlugin.autoImport.scalapbCodeGenerators.value
    )
}

object Fs2GrpcPlugin extends AutoPlugin {
  object autoImport {
    val grpcJavaVersion: String = scalapb.compiler.Version.grpcJavaVersion

    object CodeGeneratorOption {
      case object FlatPackage extends CodeGeneratorOption {
        override def toString = "flat_package"
      }
      case object JavaConversions extends CodeGeneratorOption {
        override def toString: String = "java_conversions"
      }
      case object Grpc extends CodeGeneratorOption {
        override def toString: String = "grpc"
      }
      case object Fs2Grpc extends CodeGeneratorOption {
        override def toString: String = "fs2_grpc"
      }
      case object SingleLineToProtoString extends CodeGeneratorOption {
        override def toString: String = "single_line_to_proto_string"
      }
      case object AsciiFormatToString extends CodeGeneratorOption {
        override def toString: String = "ascii_format_to_string"
      }
      case object NoLenses extends CodeGeneratorOption {
        override def toString: String = "no_lenses"
      }
      case object Scala3Sources extends CodeGeneratorOption {
        override def toString: String = "scala3_sources"
      }
    }

    val scalapbCodeGeneratorOptions =
      settingKey[Seq[CodeGeneratorOption]]("Settings for scalapb/fs2-grpc code generation")

    val scalapbProtobufDirectory =
      settingKey[File]("Directory containing protobuf files for scalapb")

    val scalapbCodeGenerators =
      settingKey[Seq[Target]]("Code generators for scalapb")

    val fs2GrpcServiceSuffix =
      settingKey[String](
        "Suffix used for generated service, e.g. service `Foo` with suffix `Fs2Grpc` results in `FooFs2Grpc`"
      )

    val fs2GrpcDisableTrailers =
      settingKey[Boolean]("Disable generation of the trailers")

    val fs2GrpcOutputPath =
      settingKey[File]("Directory for sources generated by fs2-grpc")
  }
  import autoImport._

  override def requires = sbtprotoc.ProtocPlugin && JvmPlugin
  override def trigger = NoTrigger

  def convertOptionsToScalapbGen(options: Set[CodeGeneratorOption]): (Generator, Seq[String]) = {
    scalapb.gen(
      flatPackage = options(CodeGeneratorOption.FlatPackage),
      javaConversions = options(CodeGeneratorOption.JavaConversions),
      grpc = options(CodeGeneratorOption.Grpc),
      singleLineToProtoString = options(CodeGeneratorOption.SingleLineToProtoString),
      asciiFormatToString = options(CodeGeneratorOption.AsciiFormatToString),
      lenses = !options(CodeGeneratorOption.NoLenses),
      scala3Sources = options(CodeGeneratorOption.Scala3Sources)
    )
  }

  private def codegenScalaBinaryVersion = CrossVersion.binaryScalaVersion(BuildInfo.scalaVersion)

  override def projectSettings: Seq[Def.Setting[_]] =
    List(
      fs2GrpcServiceSuffix := "Fs2Grpc",
      fs2GrpcDisableTrailers := false,
      fs2GrpcOutputPath := (Compile / sourceManaged).value / "fs2-grpc",
      scalapbProtobufDirectory := (Compile / sourceManaged).value / "scalapb",
      scalapbCodeGenerators := {
        Target(
          convertOptionsToScalapbGen(scalapbCodeGeneratorOptions.value.toSet),
          (Compile / sourceManaged).value / "scalapb"
        ) ::
          Option(
            Target(
              (
                SandboxedJvmGenerator.forModule(
                  "scala-fs2-grpc",
                  Artifact(
                    BuildInfo.organization,
                    s"${BuildInfo.codeGeneratorName}_$codegenScalaBinaryVersion",
                    BuildInfo.version
                  ),
                  BuildInfo.codeGeneratorFullName + "$",
                  Nil
                ),
                scalapbCodeGeneratorOptions.value.filterNot(_ == CodeGeneratorOption.Fs2Grpc).map(_.toString) :+
                  s"serviceSuffix=${fs2GrpcServiceSuffix.value}" +
                  s"disableTrailers=${fs2GrpcDisableTrailers.value}"
              ),
              fs2GrpcOutputPath.value
            )
          ).filter(_ => scalapbCodeGeneratorOptions.value.contains(CodeGeneratorOption.Fs2Grpc)).toList
      },
      scalapbCodeGeneratorOptions := Seq(CodeGeneratorOption.Grpc, CodeGeneratorOption.Fs2Grpc),
      libraryDependencies ++= List(
        "io.grpc" % "grpc-core" % BuildInfo.grpcVersion,
        "io.grpc" % "grpc-stub" % BuildInfo.grpcVersion,
        "io.grpc" % "grpc-protobuf" % BuildInfo.grpcVersion,
        BuildInfo.organization %% BuildInfo.runtimeName % BuildInfo.version,
        "com.thesamet.scalapb" %% "scalapb-runtime" % scalapb.compiler.Version.scalapbVersion,
        "com.thesamet.scalapb" %% "scalapb-runtime-grpc" % scalapb.compiler.Version.scalapbVersion
      )
    )
}
